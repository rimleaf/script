-- Optimized Backstab Script (Minimal Lag Edition)

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local lp = Players.LocalPlayer
local playerGui = lp:WaitForChild("PlayerGui")

---------------------------------------------------------
-- Config
---------------------------------------------------------
local LERP_SPEED = 0.1
local BEHIND_DISTANCE = 2.4
local RANGE_DEFAULT = 6
local STAB_DELAY = 0.15
local STAB_COOLDOWN = 0.3
local BACKSTAB_TIME = 0.5

---------------------------------------------------------
-- UI Setup
---------------------------------------------------------
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "BackstabGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 160, 0, 60)
frame.Position = UDim2.new(0, 10, 0, 10)
frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
frame.BackgroundTransparency = 0.3
frame.Active = true
frame.Draggable = true
frame.Parent = screenGui

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 140, 0, 40)
toggleButton.Position = UDim2.new(0, 10, 0, 10)
toggleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.Text = "Backstab: OFF"
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 18
toggleButton.Parent = frame

---------------------------------------------------------
-- Logic Variables
---------------------------------------------------------
local enabled = false
local range = RANGE_DEFAULT
local canStab = true
local isBackstabbing = false

local killerNames = { "Slasher", "c00lkidd", "JohnDoe", "1x1x1x1", "Noli" }
local killersFolder = workspace:WaitForChild("Players"):WaitForChild("Killers")

local daggerBtn, cooldownText

---------------------------------------------------------
-- UI Functions
---------------------------------------------------------
toggleButton.MouseButton1Click:Connect(function()
	enabled = not enabled
	toggleButton.Text = "Backstab: " .. (enabled and "ON" or "OFF")
	toggleButton.BackgroundColor3 = enabled and Color3.fromRGB(50, 150, 50) or Color3.fromRGB(30, 30, 30)
end)

---------------------------------------------------------
-- Utility Functions
---------------------------------------------------------
local function refreshUIRefs()
	local mainUI = playerGui:FindFirstChild("MainUI")
	local ability = mainUI and mainUI:FindFirstChild("AbilityContainer")
	daggerBtn = ability and ability:FindFirstChild("Dagger")
	cooldownText = daggerBtn and daggerBtn:FindFirstChild("CooldownTime")
end

local function isDaggerReady()
	return daggerBtn and (not cooldownText or cooldownText.Text == "")
end

local function tryActivate(btn)
	if not btn then return end
	pcall(function() btn:Activate() end)
	if type(getconnections) == "function" then
		for _, c in ipairs(getconnections(btn.MouseButton1Click)) do
			pcall(function() (c.Function or c.func or c.Fire)() end)
		end
	end
end

local function fireDagger()
	if daggerBtn then tryActivate(daggerBtn) end
end

local function easeInOutSine(t)
	return -(math.cos(math.pi * t) - 1) / 2
end

local function isBehindTarget(hrp, targetHRP)
	local dist = (hrp.Position - targetHRP.Position).Magnitude
	if dist > range then return false end
	return (hrp.Position - targetHRP.Position):Dot(-targetHRP.CFrame.LookVector) > 0.4
end

local function safeStab()
	if not canStab then return end
	canStab = false
	task.spawn(function()
		if isDaggerReady() then fireDagger() end
	end)
	task.delay(STAB_COOLDOWN, function()
		canStab = true
	end)
end

---------------------------------------------------------
-- Core Backstab Logic
---------------------------------------------------------
RunService.Heartbeat:Connect(function()
	if not enabled or isBackstabbing or not isDaggerReady() then return end

	local char = lp.Character
	local hrp = char and char:FindFirstChild("HumanoidRootPart")
	local humanoid = char and char:FindFirstChildOfClass("Humanoid")
	if not (hrp and humanoid) then return end

	for _, name in ipairs(killerNames) do
		local killer = killersFolder:FindFirstChild(name)
		local kHRP = killer and killer:FindFirstChild("HumanoidRootPart")
		if not kHRP then continue end

		if isBehindTarget(hrp, kHRP) then
			isBackstabbing = true
			local oldSpeed = humanoid.WalkSpeed
			humanoid.WalkSpeed = 0
			humanoid.AutoRotate = false

			local start = tick()
			local stabbed = false

			RunService:BindToRenderStep("BackstabMove", Enum.RenderPriority.Camera.Value + 1, function()
				local elapsed = tick() - start
				local t = math.clamp(elapsed / BACKSTAB_TIME, 0, 1)
				local eased = easeInOutSine(t)

				if not kHRP or not hrp then
					RunService:UnbindFromRenderStep("BackstabMove")
					isBackstabbing = false
					return
				end

				local kCFrame = kHRP.CFrame
				local behindPos = kCFrame.Position - (kCFrame.LookVector * BEHIND_DISTANCE)
				local targetCF = CFrame.new(Vector3.new(behindPos.X, kCFrame.Position.Y, behindPos.Z), behindPos + kCFrame.LookVector)
				hrp.CFrame = hrp.CFrame:Lerp(targetCF, eased)

				if not stabbed and elapsed >= STAB_DELAY then
					stabbed = true
					task.defer(safeStab)
				end

				if elapsed >= BACKSTAB_TIME then
					RunService:UnbindFromRenderStep("BackstabMove")
					humanoid.WalkSpeed = oldSpeed
					humanoid.AutoRotate = true
					isBackstabbing = false
				end
			end)
			break
		end
	end
end)
