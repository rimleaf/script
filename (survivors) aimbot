-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local client = LocalPlayer

-- Config
local active = true
local aimDuration = 1
local aimTargets = { "Slasher", "Jason", "c00lkidd", "JohnDoe", "1x1x1x1", "Noli" }
local trackedAnimations = {
    ["103601716322988"] = true,
    ["133491532453922"] = true,
    ["86371356500204"] = true,
    ["76649505662612"] = true,
    ["81698196845041"] = true,
    ["71685573690338"] = true,
    ["111313169447787"] = true,
    ["134958187822107"] = true,
    ["77124578197357"] = true,
    ["90499469533503"] = true
}

local entanglementanimation = {
    ["119181003138006"] = true
}
local massinfectionanimation = {
    ["131430497821198"] = true
}

-- State
local Humanoid, HRP = nil, nil
local lastTriggerTime = 0
local aiming = false
local originalWS, originalJP, originalAutoRotate = nil, nil, nil

local function getValidTarget()
    local killersFolder = workspace:FindFirstChild("Players") and workspace.Players:FindFirstChild("Killers")
    if not killersFolder or not HRP then return nil end

    local nearest, nearestDist = nil, math.huge
    for _, killer in ipairs(killersFolder:GetChildren()) do
        local humanoid = killer:FindFirstChildOfClass("Humanoid")
        local root = killer:FindFirstChild("HumanoidRootPart")

        if humanoid and root and humanoid.Health > 0 then
            local dist = (root.Position - HRP.Position).Magnitude
            if dist < nearestDist then
                nearestDist = dist
                nearest = root
            end
        end
    end

    return nearest
end

local function getPlayingAnimationIds()
    local ids = {}
    if Humanoid then
        for _, track in ipairs(Humanoid:GetPlayingAnimationTracks()) do
            if track.Animation and track.Animation.AnimationId then
                local id = track.Animation.AnimationId:match("%d+")
                if id then
                    ids[id] = true
                end
            end
        end
    end
    return ids
end

local function setupCharacter(char)
    Humanoid = char:WaitForChild("Humanoid")
    HRP = char:WaitForChild("HumanoidRootPart")
end

if LocalPlayer.Character then
    setupCharacter(LocalPlayer.Character)
end
LocalPlayer.CharacterAdded:Connect(setupCharacter)

RunService.RenderStepped:Connect(function()
    if not active or not Humanoid or not HRP then return end

    local playing = getPlayingAnimationIds()
    local triggered = false
    for id in pairs(trackedAnimations) do
        if playing[id] then
            triggered = true
            break
        end
    end

    -- check entanglement animation
    local entanglementTriggered = false
    for id in pairs(entanglementanimation) do
        if playing[id] then
            entanglementTriggered = true
            break
        end
    end

    -- check mass infection animation
    local massinfectionTriggered = false
    for id in pairs(massinfectionanimation) do
        if playing[id] then
            massinfectionTriggered = true
            break
        end
    end

    -- normal tracked aimbot
    if triggered then
        lastTriggerTime = tick()
        aiming = true
    end

-- ENTANGLEMENT AIMBOT (distance + WalkSpeed-based prediction)
-- ENTANGLEMENT AIMBOT (predicts using distance, projectile speed, and actual WalkSpeed)
if entanglementTriggered then
    task.spawn(function()
        local duration = 0.7
        local start = tick()
        while tick() - start < duration do
            local targetHRP = getValidTarget()
            if targetHRP then
                local vel = targetHRP.AssemblyLinearVelocity
                local targetHum = targetHRP.Parent:FindFirstChildOfClass("Humanoid")
                local dist = (targetHRP.Position - HRP.Position).Magnitude

                -- projectile speed for entanglement (100–130, we’ll use 115 avg)
                local projSpeed = 120
                local travelTime = dist / projSpeed

                local predictedPos
                if vel.Magnitude > 0.1 and targetHum then
                    -- scale lead directly by target WalkSpeed
                    predictedPos = targetHRP.Position + vel * travelTime * (targetHum.WalkSpeed / 16)
                else
                    predictedPos = targetHRP.Position
                end

                local direction = (predictedPos - HRP.Position).Unit
                HRP.CFrame = CFrame.lookAt(HRP.Position, HRP.Position + direction)
            end
            RunService.Heartbeat:Wait()
        end
    end)
end


-- MASS INFECTION AIMBOT (fixed reaction delay, like normal aimbot)
if massinfectionTriggered then
    task.spawn(function()
        local duration = 1
        local start = tick()
        while tick() - start < duration do
            local targetHRP = getValidTarget()
            if targetHRP then
                local vel = targetHRP.AssemblyLinearVelocity
                local predictedPos
                local reactionDelay = 0.3 -- fixed prediction like normal aimbot

                if vel.Magnitude > 0.1 then
                    predictedPos = targetHRP.Position + vel * reactionDelay
                else
                    predictedPos = targetHRP.Position
                end

                local direction = (predictedPos - HRP.Position).Unit
                HRP.CFrame = CFrame.lookAt(HRP.Position, HRP.Position + direction)
            end
            RunService.Heartbeat:Wait()
        end
    end)
end


    -- NORMAL AIMBOT (tracking killers)
    if aiming and tick() - lastTriggerTime <= aimDuration then
        if not originalWS then
            originalWS = Humanoid.WalkSpeed
            originalJP = Humanoid.JumpPower
            originalAutoRotate = Humanoid.AutoRotate
        end

        Humanoid.AutoRotate = false
        HRP.AssemblyAngularVelocity = Vector3.zero

        local targetHRP = getValidTarget()

        if targetHRP then
            local vel = targetHRP.AssemblyLinearVelocity
            local predictedPos
            local reactionDelay = 0.21

            if vel.Magnitude > 0.1 then
                predictedPos = targetHRP.Position + vel * reactionDelay
            else
                predictedPos = targetHRP.Position
            end

            local direction = (predictedPos - HRP.Position).Unit
            HRP.CFrame = CFrame.lookAt(HRP.Position, HRP.Position + direction, Vector3.yAxis)

        end
    elseif aiming then
        aiming = false
        if originalWS and originalJP and originalAutoRotate ~= nil then
            Humanoid.WalkSpeed = originalWS
            Humanoid.JumpPower = originalJP
            Humanoid.AutoRotate = originalAutoRotate
            originalWS, originalJP, originalAutoRotate = nil, nil, nil
        end
    end
end)
