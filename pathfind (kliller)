-- Pathfollow (robust) -- place as a LocalScript
local Players = game:GetService("Players")
local PathfindingService = game:GetService("PathfindingService")
local LocalPlayer = Players.LocalPlayer

-- refs that will be refreshed
local hum, root

local function bindCharacter(character)
    if not character then return end
    hum = character:WaitForChild("Humanoid")
    root = character:WaitForChild("HumanoidRootPart")
end

-- initial bind
if LocalPlayer.Character then
    bindCharacter(LocalPlayer.Character)
else
    LocalPlayer.CharacterAdded:Wait()
    bindCharacter(LocalPlayer.Character)
end
LocalPlayer.CharacterAdded:Connect(bindCharacter)

-- UI (persist across respawns)
local playerGui = LocalPlayer:WaitForChild("PlayerGui")
local screenGui = playerGui:FindFirstChild("PathFollowGui")
if not screenGui then
    screenGui = Instance.new("ScreenGui")
    screenGui.Name = "PathFollowGui"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = playerGui
end

local UserInputService = game:GetService("UserInputService")

local function makeDraggable(guiObject)
    local dragging = false
    local dragStart, startPos

    guiObject.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = guiObject.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    guiObject.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or 
           input.UserInputType == Enum.UserInputType.Touch then
            if dragging then
                local delta = input.Position - dragStart
                guiObject.Position = UDim2.new(
                    startPos.X.Scale, startPos.X.Offset + delta.X,
                    startPos.Y.Scale, startPos.Y.Offset + delta.Y
                )
            end
        end
    end)
end

-- Create button
local button = screenGui:FindFirstChild("FollowButton")
if not button then
    button = Instance.new("TextButton")
    button.Name = "FollowButton"
    button.Size = UDim2.new(0, 120, 0, 40)
    button.Position = UDim2.new(0, 20, 0, 200)
    button.Text = "Follow"
    button.Parent = screenGui
end

makeDraggable(button) -- âœ… button is now draggable

-- follow state
local followEnabled = false
local targetPlayer = nil

local function safeGetRoot(character)
    if character then
        return character:FindFirstChild("HumanoidRootPart")
    end
    return nil
end

local function computeAndFollow()
    while followEnabled and targetPlayer and targetPlayer.Character do
        if not hum or not root then
            task.wait()
            continue
        end

        local targetRoot = safeGetRoot(targetPlayer.Character)
        if not targetRoot then
            task.wait()
            continue
        end

        local ok, path = pcall(function()
            local p = PathfindingService:CreatePath({
                AgentRadius = 2,
                AgentHeight = 5,
                AgentCanJump = true,
                AgentCanClimb = true
            })
            p:ComputeAsync(root.Position, targetRoot.Position)
            return p
        end)

        if not ok or not path then
            if hum and targetRoot then
                pcall(function() hum:MoveTo(targetRoot.Position) end)
            end
            task.wait(0.5)
        else
            if path.Status == Enum.PathStatus.Success or path.Status == Enum.PathStatus.Complete then
                local waypoints = path:GetWaypoints()
                for _, waypoint in ipairs(waypoints) do
                    if not followEnabled then break end
                    if waypoint.Action == Enum.PathWaypointAction.Jump and hum then
                        pcall(function() hum:ChangeState(Enum.HumanoidStateType.Jumping) end)
                    end

                    if hum then
                        pcall(function() hum:MoveTo(waypoint.Position) end)
                        local reached = hum.MoveToFinished:Wait()
                        if not reached then
                            local start = tick()
                            while hum and root and (root.Position - waypoint.Position).magnitude > 6 and tick() - start < 2 and followEnabled do
                                task.wait()
                            end
                        end
                    end
                end
            else
                if hum and targetRoot then
                    pcall(function() hum:MoveTo(targetRoot.Position) end)
                end
            end
        end
        task.wait()
    end
end

button.MouseButton1Click:Connect(function()
    if not followEnabled then
        targetPlayer = nil
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr ~= LocalPlayer and plr.Character and safeGetRoot(plr.Character) then
                targetPlayer = plr
                break
            end
        end

        if targetPlayer then
            followEnabled = true
            button.Text = "Stop Following"
            task.spawn(computeAndFollow)
        else
            button.Text = "No Players"
            task.delay(1.5, function() if not followEnabled then button.Text = "Follow" end end)
        end
    else
        followEnabled = false
        button.Text = "Follow"
    end
end)
