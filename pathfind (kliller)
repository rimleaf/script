--// Services
local Players = game:GetService("Players")
local PathfindingService = game:GetService("PathfindingService")
local LocalPlayer = Players.LocalPlayer

--// Config
local followDistance = 5 -- how close to get before stopping
local updateRate = 0.25 -- seconds between path recalculations
local following = false -- toggle state

--// GUI Setup (only once, persists across respawns)
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "FollowGui"
screenGui.ResetOnSpawn = false -- <== keeps it after respawn
screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 120, 0, 40)
toggleButton.Position = UDim2.new(0.05, 0, 0.2, 0)
toggleButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 20
toggleButton.Text = "Follow: OFF"
toggleButton.Parent = screenGui
toggleButton.Active = true
toggleButton.Draggable = true

--// Function: Get nearest player
local function getNearestPlayer(HRP)
	local nearest, nearestDist
	for _, plr in pairs(Players:GetPlayers()) do
		if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
			local dist = (plr.Character.HumanoidRootPart.Position - HRP.Position).Magnitude
			if not nearest or dist < nearestDist then
				nearest = plr
				nearestDist = dist
			end
		end
	end
	return nearest
end

--// Function: Follow player with pathfinding (smoother)
local function followPlayer(Character, Humanoid, HRP, target)
	while following and target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") do
		local targetHRP = target.Character.HumanoidRootPart
		local distance = (targetHRP.Position - HRP.Position).Magnitude
		if distance > followDistance then
			local path = PathfindingService:CreatePath({
				AgentRadius = 2,
				AgentHeight = 5,
				AgentCanJump = true,
				AgentJumpHeight = 7,
				AgentMaxSlope = 45,
			})
			path:ComputeAsync(HRP.Position, targetHRP.Position)

			if path.Status == Enum.PathStatus.Success then
				local waypoints = path:GetWaypoints()
				for _, waypoint in ipairs(waypoints) do
					if not following then break end
					
					-- check if target moved a lot -> recalc early
					local newDist = (targetHRP.Position - HRP.Position).Magnitude
					if newDist > distance + 6 then
						break -- break path, recalc immediately
					end

					Humanoid:MoveTo(waypoint.Position)
					Humanoid.MoveToFinished:Wait(1)
				end
			end
		end
		task.wait(updateRate)
	end
end


--// Button Toggle
toggleButton.MouseButton1Click:Connect(function()
	following = not following
	toggleButton.Text = following and "Follow: ON" or "Follow: OFF"

	if following and LocalPlayer.Character then
		local Character = LocalPlayer.Character
		local Humanoid = Character:WaitForChild("Humanoid")
		local HRP = Character:WaitForChild("HumanoidRootPart")

		task.spawn(function()
			while following and Character and Character.Parent do
				local nearest = getNearestPlayer(HRP)
				if nearest then
					followPlayer(Character, Humanoid, HRP, nearest)
				else
					task.wait(1)
				end
			end
		end)
	end
end)

--// Handle respawn (reconnect humanoid/root references)
LocalPlayer.CharacterAdded:Connect(function(Character)
	Character:WaitForChild("Humanoid")
	Character:WaitForChild("HumanoidRootPart")
	-- no need to recreate GUI since ResetOnSpawn = false
end)
