--// Services
local Players = game:GetService("Players")
local PathfindingService = game:GetService("PathfindingService")
local UserInputService = game:GetService("UserInputService")

--// Player
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")
local HRP = Character:WaitForChild("HumanoidRootPart")

--// Config
local FOLLOW_ENABLED = false
local CurrentTarget = nil
local Path = nil
local WaypointIndex = 0

--// Helper: find nearest player
local function getNearestPlayer()
	local closestPlayer = nil
	local closestDist = math.huge

	for _, plr in pairs(Players:GetPlayers()) do
		if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
			local dist = (HRP.Position - plr.Character.HumanoidRootPart.Position).Magnitude
			if dist < closestDist then
				closestDist = dist
				closestPlayer = plr
			end
		end
	end
	return closestPlayer
end

--// Helper: create path
local function createPathToTarget(target)
	if not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then return nil end
	local targetPos = target.Character.HumanoidRootPart.Position
	local path = PathfindingService:CreatePath({
		AgentRadius = 2,
		AgentHeight = 5,
		AgentCanJump = true,
		AgentJumpHeight = Humanoid.JumpHeight,
		AgentMaxSlope = Humanoid.MaxSlopeAngle
	})
	path:ComputeAsync(HRP.Position, targetPos)
	if path.Status == Enum.PathStatus.Success then
		return path
	end
	return nil
end

--// Move along path once
local function followPath(path)
	local waypoints = path:GetWaypoints()
	WaypointIndex = 0

	local function moveToNext()
		WaypointIndex += 1
		if WaypointIndex <= #waypoints and FOLLOW_ENABLED then
			local waypoint = waypoints[WaypointIndex]
			Humanoid:MoveTo(waypoint.Position)
			if waypoint.Action == Enum.PathWaypointAction.Jump then
				Humanoid.Jump = true
			end
		end
	end

	moveToNext()
	Humanoid.MoveToFinished:Connect(function(reached)
		if reached and FOLLOW_ENABLED then
			moveToNext()
		end
	end)
end

--// Key toggle (T)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end
	if input.KeyCode == Enum.KeyCode.T then
		FOLLOW_ENABLED = not FOLLOW_ENABLED
		if FOLLOW_ENABLED then
			print("Follow enabled")
			CurrentTarget = getNearestPlayer()
			if CurrentTarget then
				Path = createPathToTarget(CurrentTarget)
				if Path then
					followPath(Path)
				end
			end
		else
			print("Follow disabled")
			CurrentTarget = nil
			Humanoid:MoveTo(HRP.Position)
		end
	end
end)
