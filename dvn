--// Infinite Yield Loader
loadstring(game:HttpGet('https://raw.githubusercontent.com/DarkNetworks/Infinite-Yield/main/latest.lua'))()
wait(0.1)

--[[ 
    WARNING: This script modifies weapon attributes locally.
    Use responsibly.
]]

----------------------------------------------------
--// Services & Locals
----------------------------------------------------
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local lp = player
local cam = workspace.CurrentCamera

----------------------------------------------------
--// Weapon Modifier Section
----------------------------------------------------
local WeaponList = { 
    "Aidkit", "Akimbo", "Barrier kit", "BombCharge", "Burst Rifle", "DMR", "Defibrillator", 
    "ExplosiveBag","FAST","FuelCan","Grenade Launcher","Grenade Shell","Jetpack","Keycard","LMG","Machete",
    "Mastermind's Rifle","Motion Hider","PDC kit","RPG","Rifle","SMG","Shotgun","Shovel",
    "Tablet","Aerorig","Armour Peeler","Bolter","Combat Toolkit","Gift of Fire","Governor kit","Gunslingers",
    "Hallsweeper","Hallucinator kit","Handaxes","Harpoon Gun","Intraplanar Device","Lifeline","Loose Trigger",
    "MADS kit","Mercy Kill","Overcharger","PROXY","Pacemaker","Parabolic Hydra","Rallying Cry","Recurve",
    "Resuscitator","Rocket Stormer","Runner's Heat","Shockwave Device","Sprinter's Streak","Steelforge",
    "Stonehedge kit","Stonewall","Striker","Terminal Velocity","Torqueblade","Twinface","Voltaic Impact"
}

local function modifyWeapon(w)
    if not table.find(WeaponList, w.Name) then return end

    if w:GetAttribute("Ammo") then
        w:SetAttribute("Ammo", 999)
        if not w:FindFirstChild("_AmmoListener") then
            w:GetAttributeChangedSignal("Ammo"):Connect(function()
                if w:GetAttribute("Ammo") < 999 then
                    w:SetAttribute("Ammo", 999)
                end
            end)
            local tag = Instance.new("BoolValue")
            tag.Name = "_AmmoListener"
            tag.Parent = w
        end
    end

    if w:GetAttribute("Firerate") then
        local origTag = w:FindFirstChild("_OriginalFirerate")
        if not origTag then
            local origVal = w:GetAttribute("Firerate")
            local tag = Instance.new("NumberValue")
            tag.Name = "_OriginalFirerate"
            tag.Value = (type(origVal) == "number" and origVal) or tonumber(origVal) or 0
            tag.Parent = w
        end
        local base = w:FindFirstChild("_OriginalFirerate") and w._OriginalFirerate.Value or w:GetAttribute("Firerate")
        local increased = base * 1.25
        pcall(function() w:SetAttribute("Firerate", increased) end)
        if not w:FindFirstChild("_FirerateListener") then
            w:GetAttributeChangedSignal("Firerate"):Connect(function()
                pcall(function() w:SetAttribute("Firerate", base * 1.25) end)
            end)
            local listenerTag = Instance.new("BoolValue")
            listenerTag.Name = "_FirerateListener"
            listenerTag.Parent = w
        end
    end

    if w:GetAttribute("BulletSpeed") then pcall(function() w:SetAttribute("BulletSpeed", 9999) end) end
    if w:GetAttribute("Spread") then pcall(function() w:SetAttribute("Spread", 0) end) end
    if w:GetAttribute("HeavySpread") then pcall(function() w:SetAttribute("HeavySpread", 0) end) end
    if w:GetAttribute("FullChargeTime") then pcall(function() w:SetAttribute("FullChargeTime", 0) end) end
    if w:GetAttribute("MangledReviveTime") then pcall(function() w:SetAttribute("MangledReviveTime", 0) end) end
    if w:GetAttribute("RegularReviveTime") then pcall(function() w:SetAttribute("RegularReviveTime", 0) end) end
    if w:GetAttribute("Duration") then pcall(function() w:SetAttribute("Duration", 0) end) end
    if w:GetAttribute("BurstFirerate") then pcall(function() w:SetAttribute("BurstFirerate", 999) end) end
end

local function setupCharacter(char)
    if not char then return end
    for _, child in ipairs(char:GetChildren()) do
        pcall(function() modifyWeapon(child) end)
    end
    char.ChildAdded:Connect(function(child)
        task.wait(0.1)
        pcall(function() modifyWeapon(child) end)
    end)
end

if lp.Character then
    setupCharacter(lp.Character)
end
lp.CharacterAdded:Connect(function(char)
    setupCharacter(char)
end)

task.spawn(function()
    while true do
        if lp.Character then
            for _, child in ipairs(lp.Character:GetChildren()) do
                pcall(function() modifyWeapon(child) end)
            end
        end
        task.wait(0.5)
    end
end)

----------------------------------------------------
--// ESP System Section
----------------------------------------------------
if _G.ESP_HighlightLoop then return end
_G.ESP_HighlightLoop = true

local function addESP(model)
    if model:FindFirstChild("ESP_Highlight") then return end
    local hl = Instance.new("Highlight")
    hl.Name = "ESP_Highlight"
    hl.FillColor = Color3.fromRGB(0, 255, 0)
    hl.OutlineColor = Color3.fromRGB(255, 255, 255)
    hl.FillTransparency = 0.5
    hl.OutlineTransparency = 0
    hl.Adornee = model
    hl.Parent = model
end

local function cleanESP()
    for _, m in ipairs(workspace:GetChildren()) do
        if m:IsA("Model") and m:FindFirstChild("ESP_Highlight") then
            local hum = m:FindFirstChild("Humanoid")
            local isPlayer = game.Players:FindFirstChild(m.Name)
            if not hum or isPlayer then
                m.ESP_Highlight:Destroy()
            end
        end
    end
end

task.spawn(function()
    while _G.ESP_HighlightLoop do
        for _, model in ipairs(workspace:GetChildren()) do
            if model:IsA("Model") and model:FindFirstChild("Humanoid") and model:FindFirstChild("HumanoidRootPart") then
                local isPlayer = game.Players:FindFirstChild(model.Name)
                if not isPlayer then
                    addESP(model)
                end
            end
        end
        cleanESP()
        task.wait(0.5)
    end
end)

----------------------------------------------------
--// Aimbot Section (Hold Right Click) + FOV follows mouse + Wall Check + 1.5 Stud Prediction (Torso)
----------------------------------------------------
local aimbotActive = false
local lockedTarget = nil
local MAX_AIM_FOV = 50
local PREDICTION_STUDS = 1.5

-- FOV Circle
local fovCircle = nil
pcall(function()
    if Drawing then
        fovCircle = Drawing.new("Circle")
        fovCircle.Radius = MAX_AIM_FOV
        fovCircle.Filled = false
        fovCircle.Thickness = 2
        fovCircle.Transparency = 1
        fovCircle.Color = Color3.fromRGB(255, 255, 255)
        fovCircle.Visible = true
    end
end)

local function updateFOVCircle()
    if not fovCircle then return end
    local mousePos = UserInputService:GetMouseLocation()
    fovCircle.Position = Vector2.new(mousePos.X, mousePos.Y)
end

local function getAimPart(model)
    if not model then return nil end
    if Players:FindFirstChild(model.Name) then return nil end
    return model:FindFirstChild("Torso") or model:FindFirstChild("HumanoidRootPart")
end

local function hasLineOfSightToModel(model)
    if not model then return false end
    local aimPart = getAimPart(model)
    if not aimPart then return false end

    local origin = cam.CFrame.Position
    local dir = (aimPart.Position - origin)
    local params = RaycastParams.new()
    params.FilterType = Enum.RaycastFilterType.Blacklist
    params.FilterDescendantsInstances = {lp.Character}
    params.IgnoreWater = true

    local result = workspace:Raycast(origin, dir, params)
    return (not result) or (result.Instance and result.Instance:IsDescendantOf(model))
end

local function getClosestTargetWithinFOV()
    local mousePos = UserInputService:GetMouseLocation()
    local bestModel, bestDist = nil, math.huge
    for _, model in ipairs(workspace:GetChildren()) do
        if not model:IsA("Model") then continue end
        local hum = model:FindFirstChild("Humanoid")
        if not hum or hum.Health <= 0 then continue end
        if Players:FindFirstChild(model.Name) then continue end

        local aimPart = getAimPart(model)
        if not aimPart then continue end

        local screenPos, onScreen = cam:WorldToViewportPoint(aimPart.Position)
        if not onScreen or screenPos.Z <= 0 then continue end

        local dist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
        if dist > MAX_AIM_FOV then continue end
        if not hasLineOfSightToModel(model) then continue end

        if dist < bestDist then
            bestDist = dist
            bestModel = model
        end
    end
    return bestModel
end

local function moveMouseTo(targetScreenPos)
    if not targetScreenPos then return end
    local mousePos = UserInputService:GetMouseLocation()
    local dx, dy = targetScreenPos.X - mousePos.X, targetScreenPos.Y - mousePos.Y
    if mousemoverel then
        pcall(function() mousemoverel(dx, dy) end)
    end
end

UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aimbotActive = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gp)
    if gp then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aimbotActive = false
        lockedTarget = nil
    end
end)

RunService.RenderStepped:Connect(function()
    updateFOVCircle()
    if not aimbotActive then return end

    if not lockedTarget or not lockedTarget.Parent then
        lockedTarget = getClosestTargetWithinFOV()
    end

    if lockedTarget then
        local part = getAimPart(lockedTarget)
        if part then
            local predictedPos = part.Position
            local vel = part.Velocity
            if vel.Magnitude > 1 then
                predictedPos += vel.Unit * PREDICTION_STUDS
            end

            local screenPos, onScreen = cam:WorldToViewportPoint(predictedPos)
            if onScreen and screenPos.Z > 0 and hasLineOfSightToModel(lockedTarget) then
                moveMouseTo(Vector2.new(screenPos.X, screenPos.Y))
            end
        else
            lockedTarget = getClosestTargetWithinFOV()
        end
    end
end)
