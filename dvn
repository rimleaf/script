--// Infinite Yield Loader
loadstring(game:HttpGet('https://raw.githubusercontent.com/DarkNetworks/Infinite-Yield/main/latest.lua'))()
wait(0.1)

--[[ 
    WARNING: This script modifies weapon attributes locally.
    Use responsibly.
]]

----------------------------------------------------
--// Services & Locals
----------------------------------------------------
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local lp = player
local cam = workspace.CurrentCamera

----------------------------------------------------
--// Weapon Modifier Section (optimized)
----------------------------------------------------
local WeaponList = { 
    "Aidkit", "Akimbo", "Barrier kit", "BombCharge", "Burst Rifle", "DMR", "Defibrillator", 
    "ExplosiveBag","FAST","FuelCan","Grenade Launcher","Grenade Shell","Jetpack","Keycard","LMG","Machete",
    "Mastermind's Rifle","Motion Hider","PDC kit","RPG","Rifle","SMG","Shotgun","Shovel",
    "Tablet","Aerorig","Armour Peeler","Bolter","Combat Toolkit","Gift of Fire","Governor kit","Gunslingers",
    "Hallsweeper","Hallucinator kit","Handaxes","Harpoon Gun","Intraplanar Device","Lifeline","Loose Trigger",
    "MADS kit","Mercy Kill","Overcharger","PROXY","Pacemaker","Parabolic Hydra","Rallying Cry","Recurve",
    "Resuscitator","Rocket Stormer","Runner's Heat","Shockwave Device","Sprinter's Streak","Steelforge",
    "Stonehedge kit","Stonewall","Striker","Terminal Velocity","Torqueblade","Twinface","Voltaic Impact", "Ammo Box"
}

local DesiredAttributes = {
    Ammo = 999,
    FirerateMultiplier = 2,
    RefillRate = 200,
    HealthOnHit = 20,
    HealthOnKill = 200,
    ChainLimit = 20,
    ChainRadius = 200,
    ThrustSpeed = 270,
    Spread = 0,
    HeavySpread = 0,
    FullChargeTime = 0,
    MangledReviveTime = 0,
    RegularReviveTime = 0,
    Duration = 0,
    BurstFirerate = 999,
    BulletSpeed = 99999999999,
    Charges = 999,
    RechargeDuration = 0,
    MaxMADS = 999,
    ThrowAmmoCost = 0
}

local function isWeaponNameAllowed(name)
    return table.find(WeaponList, name) ~= nil
end

local function applyAttributeMods(obj)
    if not obj or not obj:IsA("Instance") then return end
    if not isWeaponNameAllowed(obj.Name) then return end
    if obj:FindFirstChild("_ModsApplied") then return end

    local mark = Instance.new("BoolValue")
    mark.Name = "_ModsApplied"
    mark.Parent = obj

    if obj:GetAttribute("Ammo") ~= nil then
        pcall(function() obj:SetAttribute("Ammo", DesiredAttributes.Ammo) end)
        obj:GetAttributeChangedSignal("Ammo"):Connect(function()
            local val = obj:GetAttribute("Ammo")
            if type(val) == "number" and val < DesiredAttributes.Ammo then
                pcall(function() obj:SetAttribute("Ammo", DesiredAttributes.Ammo) end)
            end
        end)
    end

    if obj:GetAttribute("Firerate") ~= nil then
        if not obj:FindFirstChild("_OriginalFirerate") then
            local origVal = obj:GetAttribute("Firerate")
            local tag = Instance.new("NumberValue")
            tag.Name = "_OriginalFirerate"
            tag.Value = (type(origVal) == "number" and origVal) or tonumber(origVal) or 0
            tag.Parent = obj
        end
        local base = obj:FindFirstChild("_OriginalFirerate") and obj._OriginalFirerate.Value or obj:GetAttribute("Firerate")
        local increased = base * DesiredAttributes.FirerateMultiplier
        pcall(function() obj:SetAttribute("Firerate", increased) end)
        obj:GetAttributeChangedSignal("Firerate"):Connect(function()
            pcall(function() obj:SetAttribute("Firerate", base * DesiredAttributes.FirerateMultiplier) end)
        end)
    end

    local genericAttrs = {
        "RefillRate","HealthOnHit","HealthOnKill","ChainLimit","CallDuration","ChainRadius",
        "ThrustSpeed","Spread","HeavySpread","FullChargeTime","MangledReviveTime",
        "RegularReviveTime","Duration","BurstFirerate","BulletSpeed","Charges",
        "MaxCharges","RechargeDuration","MaxMADS","ThrowAmmoCost"
    }

    for _, attrName in ipairs(genericAttrs) do
        if obj:GetAttribute(attrName) ~= nil then
            if attrName == "MaxCharges" then
                pcall(function() obj:SetAttribute("BulletSpeed", 100) end)
            else
                local desired = DesiredAttributes[attrName] or nil
                if attrName == "CallDuration" then desired = 9999 end
                if desired ~= nil then
                    pcall(function() obj:SetAttribute(attrName, desired) end)
                    obj:GetAttributeChangedSignal(attrName):Connect(function()
                        pcall(function() obj:SetAttribute(attrName, desired) end)
                    end)
                end
            end
        end
    end
end

local function scanAndApply(container)
    if not container then return end
    for _, child in ipairs(container:GetChildren()) do
        pcall(function() applyAttributeMods(child) end)
        for _, d in ipairs(child:GetDescendants()) do
            pcall(function() applyAttributeMods(d) end)
        end
    end
end

if lp then
    scanAndApply(lp:FindFirstChildOfClass("Backpack") or lp.Backpack)
    scanAndApply(lp.Character)

    local backpack = lp:FindFirstChildOfClass("Backpack") or lp:WaitForChild("Backpack")
    backpack.ChildAdded:Connect(function(child)
        task.wait(0.05)
        pcall(function() applyAttributeMods(child) end)
    end)

    lp.CharacterAdded:Connect(function(char)
        scanAndApply(char)
        char.ChildAdded:Connect(function(child)
            task.wait(0.05)
            pcall(function() applyAttributeMods(child) end)
        end)
        char.DescendantAdded:Connect(function(desc)
            task.wait(0.05)
            pcall(function() applyAttributeMods(desc) end)
        end)
    end)

    if lp.Character then
        lp.Character.ChildAdded:Connect(function(child)
            task.wait(0.05)
            pcall(function() applyAttributeMods(child) end)
        end)
        lp.Character.DescendantAdded:Connect(function(desc)
            task.wait(0.05)
            pcall(function() applyAttributeMods(desc) end)
        end)
    end
end

Workspace.ChildAdded:Connect(function(c)
    task.wait(0.05)
    pcall(function() applyAttributeMods(c) end)
    c.DescendantAdded:Connect(function(d)
        task.wait(0.05)
        pcall(function() applyAttributeMods(d) end)
    end)
end)

scanAndApply(workspace)

----------------------------------------------------
--// Shielder Shield Remover
----------------------------------------------------
local function handleModel(model)
    if not model or not model:IsA("Model") then return end

    if model.Name == "Shielder" then
        local shieldPart = model:FindFirstChild("Shield")
        if shieldPart and shieldPart:IsA("BasePart") then
            shieldPart:Destroy()
        end
    elseif model.Name == "EscortShielder" then
        local shieldModel = model:FindFirstChild("Shield")
        if shieldModel and shieldModel:IsA("Model") then
            shieldModel:Destroy()
        end
    end
end

for _, model in ipairs(workspace:GetChildren()) do
    pcall(function() handleModel(model) end)
end

workspace.ChildAdded:Connect(function(child)
    if child:IsA("Model") then
        child.DescendantAdded:Connect(function(descendant)
            if descendant.Name == "Shield" then
                task.wait(0.05)
                pcall(function() handleModel(child) end)
            end
        end)
        task.wait(0.05)
        pcall(function() handleModel(child) end)
    end
end)

----------------------------------------------------
--// ESP System
----------------------------------------------------
if _G.ESP_HighlightLoop then return end
_G.ESP_HighlightLoop = true

local function addESP(model)
    if model:FindFirstChild("ESP_Highlight") then return end
    local hl = Instance.new("Highlight")
    hl.Name = "ESP_Highlight"
    hl.FillColor = Color3.fromRGB(255, 0, 0)
    hl.OutlineColor = Color3.fromRGB(255, 255, 255)
    hl.FillTransparency = 0.7
    hl.OutlineTransparency = 0
    hl.Adornee = model
    hl.Parent = model
end

local function cleanESP()
    for _, m in ipairs(workspace:GetChildren()) do
        if m:IsA("Model") and m:FindFirstChild("ESP_Highlight") then
            local hum = m:FindFirstChild("Humanoid")
            local isPlayer = game.Players:FindFirstChild(m.Name)
            if not hum or isPlayer then
                m.ESP_Highlight:Destroy()
            end
        end
    end
end

task.spawn(function()
    while _G.ESP_HighlightLoop do
        for _, model in ipairs(workspace:GetChildren()) do
            if model:IsA("Model") and model:FindFirstChild("Humanoid") and model:FindFirstChild("HumanoidRootPart") then
                local isPlayer = game.Players:FindFirstChild(model.Name)
                if not isPlayer then
                    addESP(model)
                end
            end
        end
        cleanESP()
        task.wait(0.6)
    end
end)

----------------------------------------------------
--// Improved Aimbot (Sniper Priority + Stable Lock + Smooth Aim)
----------------------------------------------------
local aimbotActive = false
local lockedTarget = nil
local MAX_AIM_FOV = 50
local PREDICTION_STUDS = 3
local SMOOTHNESS = 0

local fovCircle = nil
pcall(function()
    if Drawing then
        fovCircle = Drawing.new("Circle")
        fovCircle.Radius = MAX_AIM_FOV
        fovCircle.Filled = false
        fovCircle.Thickness = 1
        fovCircle.Transparency = 1
        fovCircle.Color = Color3.fromRGB(255, 255, 255)
        fovCircle.Visible = true
    end
end)

local function updateFOVCircle()
    if not fovCircle then return end
    local mousePos = UserInputService:GetMouseLocation()
    fovCircle.Position = Vector2.new(mousePos.X, mousePos.Y)
end

local function getAimPart(model)
    if not model then return nil end
    if Players:FindFirstChild(model.Name) then return nil end
    return model:FindFirstChild("Torso") or model:FindFirstChild("Head") or model:FindFirstChild("HumanoidRootPart")
end

local function hasLineOfSightToModel(model)
    if not model then return false end
    local aimPart = getAimPart(model)
    if not aimPart then return false end
    local origin = cam.CFrame.Position
    local direction = aimPart.Position - origin
    local params = RaycastParams.new()
    params.FilterType = Enum.RaycastFilterType.Blacklist
    params.FilterDescendantsInstances = {lp.Character}
    params.IgnoreWater = true
    local result = workspace:Raycast(origin, direction, params)
    if not result then return true end
    return result.Instance and result.Instance:IsDescendantOf(model)
end

local function isValidTargetInFOV(model, mousePos)
    if not model or not model:IsA("Model") then return false end
    local hum = model:FindFirstChild("Humanoid")
    if not hum or hum.Health <= 0 then return false end
    if Players:FindFirstChild(model.Name) then return false end
    local aimPart = getAimPart(model)
    if not aimPart then return false end
    local screenPos, onScreen = cam:WorldToViewportPoint(aimPart.Position)
    if not onScreen or screenPos.Z <= 0 then return false end
    local dist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
    if dist > MAX_AIM_FOV then return false end
    if not hasLineOfSightToModel(model) then return false end
    return true, dist, screenPos
end

local function findSniperInFOV(mousePos)
    local bestSniper, bestDist, bestScreen = nil, math.huge, nil
    for _, model in ipairs(workspace:GetChildren()) do
        if model:IsA("Model") and model.Name == "Sniper" then
            local valid, dist, screenPos = isValidTargetInFOV(model, mousePos)
            if valid and dist < bestDist then
                bestSniper, bestDist, bestScreen = model, dist, screenPos
            end
        end
    end
    return bestSniper, bestScreen
end

local function getClosestTargetWithinFOV()
    local mousePos = UserInputService:GetMouseLocation()
    local sniperModel, sniperScreen = findSniperInFOV(mousePos)
    if sniperModel then return sniperModel, sniperScreen end
    local bestModel, bestDist, bestScreen = nil, math.huge, nil
    for _, model in ipairs(workspace:GetChildren()) do
        if model:IsA("Model") then
            local valid, dist, screenPos = isValidTargetInFOV(model, mousePos)
            if valid and dist < bestDist then
                bestModel, bestDist, bestScreen = model, dist, screenPos
            end
        end
    end
    return bestModel, bestScreen
end

local function moveMouseSmoothly(targetScreenPos)
    if not targetScreenPos then return end
    local mousePos = UserInputService:GetMouseLocation()
    local dx = (targetScreenPos.X - mousePos.X) * SMOOTHNESS
    local dy = (targetScreenPos.Y - mousePos.Y) * SMOOTHNESS
    if mousemoverel then
        pcall(function() mousemoverel(dx, dy) end)
    end
end

UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aimbotActive = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gp)
    if gp then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aimbotActive = false
        lockedTarget = nil
    end
end)

RunService.RenderStepped:Connect(function()
    updateFOVCircle()
    if not aimbotActive then return end
    local mousePos = UserInputService:GetMouseLocation()
    if lockedTarget then
        local hum = lockedTarget:FindFirstChild("Humanoid")
        if not hum or hum.Health <= 0 or not hasLineOfSightToModel(lockedTarget) then
            lockedTarget = nil
        end
    end
    if not lockedTarget then
        local newTarget, _ = getClosestTargetWithinFOV()
        lockedTarget = newTarget
    end
    if lockedTarget then
        local part = getAimPart(lockedTarget)
        if part then
            local predictedPos = part.Position
            local vel = part.Velocity
            if vel and vel.Magnitude > 1 then
                predictedPos = predictedPos + vel.Unit * PREDICTION_STUDS
            end
            local screenPos, onScreen = cam:WorldToViewportPoint(predictedPos)
            if onScreen and screenPos.Z > 0 and hasLineOfSightToModel(lockedTarget) then
                moveMouseSmoothly(Vector2.new(screenPos.X, screenPos.Y))
            else
                lockedTarget = nil
            end
        else
            lockedTarget = nil
        end
    end
end)
